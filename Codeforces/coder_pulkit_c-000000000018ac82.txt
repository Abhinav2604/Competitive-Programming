#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
using namespace __gnu_pbds; 
using namespace std;

#define ff              first
#define ss              second
#define int             long long
#define pb              push_back
#define mp              make_pair
#define pii             pair<int,int>
#define vi              vector<int>
#define mii             map<int,int>
#define pqb             priority_queue<int>
#define pqs             priority_queue<int,vi,greater<int> >
#define MX              200005
#define mod             1000000007
#define inf             1e18
#define ps(x,y)         fixed<<setprecision(y)<<x
#define mk(arr,n,type)  type *arr=new type[n];
#define w(x)            int x; cin>>x; while(x--)
#define pw(b,p)         pow(b,p) + 0.1
mt19937                 rng(chrono::steady_clock::now().time_since_epoch().count());

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;

void c_p_c()
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
}

vi adj[100005];
int arr[100005];
int dp[100005][3];

void dfs(int nd,int pr)
{
	dp[nd][1]=dp[nd][2]=arr[nd];

	for(auto el : adj[nd])
		if(el!=pr)
			dfs(el,nd);

	dp[nd][0]=0;

	int mx=-inf,child_to_suffer;

	for(auto el : adj[nd])
		if(el!=pr)
		{
			dp[nd][0] += max(dp[el][0],dp[el][2]);

			dp[nd][1] += max({dp[el][1],dp[el][2],dp[el][0]+arr[el]});

			if(dp[el][1]-max(dp[el][0],dp[el][2])>=mx)
				mx = dp[el][1]-max(dp[el][0],dp[el][2]),child_to_suffer=el;
		}

	for(auto el : adj[nd])
	{
		if(el!=pr)
		{
			if(el==child_to_suffer)
				dp[nd][2] += dp[el][1];

			else
				dp[nd][2] += max({dp[el][1],dp[el][2],dp[el][0]});
		}
	}

	if(nd!=1 && adj[nd].size()==1)
		dp[nd][2]=-inf;
}

int32_t main()
{
    c_p_c();
    int tc; cin>>tc;
    for(int tnum=1;tnum<=tc;++tnum)
    {
        int n; cin>>n;

        for(int i=1;i<=n;++i)
        {
            cin >> arr[i];
            adj[i].clear();
        }

        for(int i=0;i<n-1;++i)
        {
            int u,v; cin>>u>>v;
            adj[u].pb(v);
            adj[v].pb(u);
        }

        dfs(1,0);
        int ans = max({dp[1][0],dp[1][1],dp[1][2]});

        cout<<"Case #"<<tnum<<": "<<ans<<'\n';
    }
    return 0;
}