#include <bits/stdc++.h>
using namespace std;
 
typedef long long LL;
typedef pair<int, int> PII;
typedef vector<int> VI;

#define MP make_pair
#define PB push_back
#define X first
#define Y second
 
#define FOR(i, a, b) for(int i = (a); i < (b); ++i)
#define RFOR(i, b, a) for(int i = (b) - 1; i >= (a); --i)
#define ITER(it, a) for(__typeof(a.begin()) it = a.begin(); it != a.end(); ++it)
#define ALL(a) a.begin(), a.end()
#define SZ(a) (int)((a).size())
#define FILL(a, value) memset(a, value, sizeof(a))
#define debug(a) cout << #a << " = " << a << endl;

const double PI = acos(-1.0);
const LL INF = 1e9 + 47;
const LL LINF = INF * INF;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

const int N = 1 << 17;
int n;
VI g[N];
VI syny[N];
LL dp[N][2][2];
int a[N];

void dfs(int v, int p)
{
	for(auto i: g[v])
		if (i != p)
		{
			dfs(i, v);
			syny[v].PB(i);
		}
	
	if (SZ(syny[v]) == 0)
	{
		dp[v][0][0] = 0;
		dp[v][0][1] = a[v];
		dp[v][1][0] = 0;
		dp[v][1][1] = 0;
		return;
	}
	
	dp[v][0][0] = 0;
	for(auto i: syny[v])
		dp[v][0][0] += a[i] + max(dp[i][0][0], dp[i][1][0]);
	
	dp[v][0][1] = a[v];
	for(auto i: syny[v])
		dp[v][0][1] += a[i] + max(dp[i][0][0], dp[i][1][0]);
	
	dp[v][1][0] = 0;
	for(auto i: syny[v])
		dp[v][1][0] += max(dp[i][0][1], dp[i][1][1]);
	
	LL berem = a[v], neberem = 0;
	LL mn = LINF;
	for(auto i: syny[v])
	{
		neberem += dp[i][1][1];
		berem += max(dp[i][1][1], dp[i][0][1]);
		mn = min(mn, dp[i][1][1] - dp[i][0][1]);
	}
	
	berem -= max(0LL, mn);
	dp[v][1][1] = max(berem, neberem);
}

LL solve()
{
	cin >> n;
	FOR(i, 0, n)
		g[i].clear(), syny[i].clear();
		
	FOR(i, 0, n)
		cin >> a[i];
	FOR(i, 0, n - 1)
	{
		int u, v;
		cin >> u >> v;
		--u; --v;
		g[u].PB(v);
		g[v].PB(u);
	}
	
	dfs(0, -1);
	
	return max(dp[0][0][1], dp[0][1][1]);
}

int main()
{
	ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	//freopen("In.txt", "r", stdin);
	//freopen("In.txt", "w", stdout);
	
	int tc;
	cin >> tc;
	FOR(t, 1, tc + 1)
	{
		cout << "Case #" << t << ": ";
		cout << solve() << endl;
	}
	
	cerr << "Time elapsed: " << clock() / (double)CLOCKS_PER_SEC << endl;
	return 0;
}
