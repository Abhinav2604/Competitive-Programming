#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
using namespace __gnu_pbds; 
using namespace std;

#define ff              first
#define ss              second
#define int             long long
#define pb              push_back
#define mp              make_pair
#define pii             pair<int,int>
#define vi              vector<int>
#define mii             map<int,int>
#define pqb             priority_queue<int>
#define pqs             priority_queue<int,vi,greater<int> >
#define MX              200005
#define mod             1000000007
#define inf             1e18
#define ps(x,y)         fixed<<setprecision(y)<<x
#define mk(arr,n,type)  type *arr=new type[n];
#define w(x)            int x; cin>>x; while(x--)
#define pw(b,p)         pow(b,p) + 0.1
mt19937                 rng(chrono::steady_clock::now().time_since_epoch().count());

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;

void c_p_c()
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
}

int dp[101][101];
int arr[101];

int get(int n,int k)
{
	if(k>n)
		return inf;

	if(dp[n][k]!=-1)
		return dp[n][k];

	if(k==1)
	{
		mii fq;
		for(int i=0;i<n;++i)
			fq[arr[i]]++;

		int mx=0;

		for(auto el : fq)
			mx = max(mx,el.ss);

		return dp[n][k] = n-mx;
	}

	int mx=0;
	mii fq;

	dp[n][k]=inf;

	for(int i=n-1;i>=k-1;i--)
	{
		fq[arr[i]]++;
		int fqvl = fq[arr[i]];
		
		mx=max(mx,fqvl);

		dp[n][k] = min(dp[n][k],get(i,k-1) + n-i-mx);
	}

	return dp[n][k];
}

int32_t main()
{
    c_p_c();
    int tc; cin>>tc;
    for(int tnum=1;tnum<=tc;++tnum)
    {
    	int n,k;
    	cin>>n>>k;

    	for(int i=0;i<n;++i)
    		cin>>arr[i];

    	int cnt=0;

    	for(int i=1;i<n;++i)
    		if(arr[i]!=arr[i-1])
    			cnt++;

    	if(cnt<=k)
    	{
    		cout<<"Case #"<<tnum<<": "<<0<<'\n';
    		continue;
    	}

    	memset(dp,-1,sizeof(dp));
    	int ans=inf;

    	//cout<<get(3,2)<<'\n';

    	for(int diff=1;diff<=k+1;++diff)
    		ans = min(ans,get(n,diff));

    	cout<<"Case #"<<tnum<<": "<<ans<<'\n';
    }
    return 0;
}